plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'io.codearte.nexus-staging' version '0.21.1'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven-publish'

group 'com.cloudinary'
version '0.1.1-beta'

allprojects {
    repositories {
        mavenCentral()
    }
    project.ext.set("publishGroupId", group)
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
}

nexusPublishing {
    transitionCheckOptions {
        maxRetries.set(150)
        delayBetween.set(Duration.ofSeconds(5))
    }
    repositories {
        sonatype {
            username = project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : ""
            password = project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : ""
        }
    }
}

task execute(type:JavaExec) {
    main = System.getProperty('mainClass')
    classpath = sourceSets.main.runtimeClasspath
}

dependencies {
    api 'com.cloudinary:media-delivery-api-java:0.1.1-beta'
    api 'com.cloudinary:media-editing-api-java:0.1.1-beta'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar, sourcesJar
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

if (hasProperty("ossrhPassword")) {

    signing {
        sign configurations.archives
    }

    nexusStaging {
        packageGroup = group
        username = project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : ""
        password = project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : ""
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'Media Editing Java'
                    packaging = 'jar'
                    groupId = publishGroupId
                    artifactId = 'media-editing-java'
                    description = publishDescription
                    url = githubUrl
                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }

                    developers {
                        developer {
                            id = developerId
                            name = developerName
                            email = developerEmail
                        }
                    }
                    scm {
                        connection = scmConnection
                        developerConnection = scmDeveloperConnection
                        url = scmUrl
                    }
                }

                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }

        model {
            tasks.generatePomFileForMavenJavaPublication {
                destination = file("$buildDir/generated-pom.xml")
            }
            tasks.publishMavenJavaPublicationToMavenLocal {
                dependsOn project.tasks.signArchives
            }
            tasks.publishMavenJavaPublicationToSonatypeRepository {
                dependsOn project.tasks.signArchives
            }
        }
    }
}

javadoc {
    options.tags = [ "http.response.details:a:Http Response Details" ]
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}